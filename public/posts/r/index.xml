<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R on JW Blog</title>
    <link>https://jiwooblog.netlify.app/posts/r/</link>
    <description>Recent content in R on JW Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko</language>
    <copyright>&amp;copy;{year}, All Rights Reserved</copyright>
    <lastBuildDate>Fri, 28 Feb 2020 10:08:56 +0900</lastBuildDate>
    
        <atom:link href="https://jiwooblog.netlify.app/posts/r/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      <item>
        <title>시각화</title>
        <link>https://jiwooblog.netlify.app/posts/r/%EC%8B%9C%EA%B0%81%ED%99%94/</link>
        <pubDate>Fri, 28 Feb 2020 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/%EC%8B%9C%EA%B0%81%ED%99%94/</guid>
        <description>Visualization</description>
      </item>
      
      <item>
        <title>lubridate</title>
        <link>https://jiwooblog.netlify.app/posts/r/lubridate/</link>
        <pubDate>Fri, 19 Mar 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/lubridate/</guid>
        <description>lubridate 패키지 훑어보기 lubridate는 날짜 데이터를 처리하기 위한 패키지입니다.
1  library(lubridate)    목차  parse datetimes  1. parse datetimes   다양한 형태 #1  1 2 3 4 5 6 7 8 9 10 11  # 다양한 형태가 있다. # ymd_hms(), ymd_hm(), ymd_h() # ydm_hms(), ydm_hm(), ydm_h() # mdy_hms(), mdy_hm(), mdy_h() # dmy_hms(), dmy_hm(), dmy_h() # ymd(), ydm() # mdy(), myd() # dmy(), dym() # yq() Q for quarter ymd_hms(&amp;#34;2017-11-28T14:02:00&amp;#34;)   ## [1] &amp;quot;2017-11-28 14:02:00 UTC&amp;quot;1  ydm_hms(&amp;#34;2017-22-12 10:00:00&amp;#34;)   ## [1] &amp;quot;2017-12-22 10:00:00 UTC&amp;quot;1  mdy_hms(&amp;#34;11/28/2017 1:02:03&amp;#34;)   ## [1] &amp;quot;2017-11-28 01:02:03 UTC&amp;quot;1  dmy_hms(&amp;#34;1 Jan 2017 23:59:59&amp;#34;)   ## [1] &amp;quot;2017-01-01 23:59:59 UTC&amp;quot;1  ymd(20170131)   ## [1] &amp;quot;2017-01-31&amp;quot;1  mdy(&amp;#34;July 4th, 2000&amp;#34;)   ## [1] &amp;quot;2000-07-04&amp;quot;1  dmy(&amp;#34;4th of July &amp;#39;99&amp;#34;)   ## [1] &amp;quot;1999-07-04&amp;quot;1  yq(&amp;#34;2001: Q3&amp;#34;)   ## [1] &amp;quot;2001-07-01&amp;quot;     다양한 형태 #2  1  today()   ## [1] &amp;quot;2021-03-23&amp;quot;1  now()   ## [1] &amp;quot;2021-03-23 11:24:45 KST&amp;quot;1  date_decimal(2021.</description>
      </item>
      
      <item>
        <title>tidyr</title>
        <link>https://jiwooblog.netlify.app/posts/r/tidyr/</link>
        <pubDate>Sun, 28 Feb 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/tidyr/</guid>
        <description>tidyr 패키지 훑어보기 tidyr은 tidy data를 형성하기 위해 고안된 패키지입니다. tidy data에서 1) 열은 변수를 의미하고, 2) 행은 하나의 케이스를 의미하며, 3) 하나의 셀은 하나의 값을 의미합니다.
1  library(tidyverse)    목차  nest  nest 예시를 통해, 단순히 group_by를 하는 것과 group_by 이후 nest를 한 후에 어떻게 데이터가 정리되는지 확인해보자.
  nest 예시  1 2  iris %&amp;gt;% group_by(Species)   ## # A tibble: 150 x 5## # Groups: Species [3]## Sepal.</description>
      </item>
      
      <item>
        <title>dplyr</title>
        <link>https://jiwooblog.netlify.app/posts/r/dplyr/</link>
        <pubDate>Sun, 21 Feb 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/dplyr/</guid>
        <description>dplyr 패키지 훑어보기 1 2  library(tidyverse) library(MASS)   목차  rowwise
1-1. pmax slice relocate lag, lead between, near coalsece recode first, last, nth rownames_to_column, column_to_rownames bind_rows, bind_cols mutate_all, mutate_if inner_join, left_join, right_join, full_join semi_join, anti_join  데이터   data  1 2 3 4  tmp &amp;lt;- tibble(x=round(rnorm(n=5, mean=5, sd=1)), y=round(rnorm(n=5, mean=5, sd=3)), z=round(rnorm(n=5, mean=5, sd=5))) tmp   ## # A tibble: 5 x 3## x y z## &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;## 1 6 7 -1## 2 5 4 -2## 3 5 2 6## 4 6 2 12## 5 5 4 21 2  data(survey) glimpse(survey)   ## Rows: 237## Columns: 12## $ Sex &amp;lt;fct&amp;gt; Female, Male, Male, Male, Male, Female, Male, Female, Male, .</description>
      </item>
      
      <item>
        <title>purrr</title>
        <link>https://jiwooblog.netlify.app/posts/r/purrr/</link>
        <pubDate>Sun, 21 Feb 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/purrr/</guid>
        <description>purrr 패키지 훑어보기 purrr는 R에서 깔끔하게 반복 작업 처리하는 패키지입니다. Purrr 을 이용하면 반복작업을 Apply family 에 비해 더욱 직관적이고 쉽게 할 수 있습니다. purrr는 고양이 울음소리와 R의 합성어로, 로고는 아래와 같습니다.
1  library(tidyverse)   목차  map, map2 pmap, invoke_map rerun every, some, none reduce, accumulate  map, map2   map, map2 예시  1 2 3 4 5  num &amp;lt;- c(1,2,4,5,7) num2 &amp;lt;- c(3,5,6,8,9) #list map(num, function(x){x^2})   ## [[1]]## [1] 1## ## [[2]]## [1] 4## ## [[3]]## [1] 16## ## [[4]]## [1] 25## ## [[5]]## [1] 491  map2(num, num2, sum)   ## [[1]]## [1] 4## ## [[2]]## [1] 7## ## [[3]]## [1] 10## ## [[4]]## [1] 13## ## [[5]]## [1] 161 2  #numeric vector map_dbl(num, function(x){x^2})   ## [1] 1 4 16 25 491  map2_dbl(num, num2, sum)   ## [1] 4 7 10 13 16     map 실전활용- iris data  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  n_iris &amp;lt;- iris %&amp;gt;% group_by(Species) %&amp;gt;% nest() mod_fun &amp;lt;- function(df){ lm(Sepal.</description>
      </item>
      
      <item>
        <title>R 꿀팁</title>
        <link>https://jiwooblog.netlify.app/posts/r/r_tip/</link>
        <pubDate>Sun, 31 Jan 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/r_tip/</guid>
        <description>1. 추천 사이트  R for data science  2. 검색 팁 구글링 시, 뒤에 &amp;lsquo;Rpubs&amp;rsquo; 붙이기
3. blogdown Auto-Knit 끄기 Ctrl+S 단축키로 수시로 저장하는 습관 때문에, Rmd 파일을 작업할 때 knit가 수시로 되어 작업속도에 영향을 미친다.
이럴 때는 .Rprofile이라는 이름의 파일을 찾아서
 blogdown.knit.on_save = TRUE
 라는 코드에서 TRUE를 FALSE로 바꿔주어야 한다.
4. 자동정렬 단축키 ctrl + I
5. python의 dictionary처럼 사용하기 1 2 3 4 5  # recode: case_when의 특수한 형태로서 데이터를 교체할 때 사용할 수 있을 것이다.</description>
      </item>
      
      <item>
        <title>NA Imputation</title>
        <link>https://jiwooblog.netlify.app/posts/r/na_imputation/</link>
        <pubDate>Sat, 23 Jan 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/na_imputation/</guid>
        <description>데이터 설명dataset containing demographic data and laboratory data of 857 patients with acute coronary syndrome(ACS).
# 변수별 NA값 확인colSums(is.na(acs))## age sex cardiogenicShock entry ## 0 0 0 0 ## Dx EF height weight ## 0 134 93 91 ## BMI obesity TC LDLC ## 93 0 23 24 ## HDLC TG DM HBP ## 23 15 0 0 ## smoking ## 0colSums(is.na(acs))[colSums(is.na(acs))&amp;gt;0]## EF height weight BMI TC LDLC HDLC TG ## 134 93 91 93 23 24 23 15na.</description>
      </item>
      
      <item>
        <title>base</title>
        <link>https://jiwooblog.netlify.app/posts/r/base/</link>
        <pubDate>Fri, 19 Mar 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/base/</guid>
        <description>base 함수 중 유용한 함수 훑어보기 1 2  library(tidyverse) library(palmerpenguins)   1. split   split 예시  1 2 3 4 5 6 7 8 9  #1col기준으로 분리 penguins %&amp;gt;% split(.$species) -&amp;gt; split1 #2col기준으로 분리 penguins %&amp;gt;% split(list(.$species, .$island)) -&amp;gt; split2 #10row기준으로 분리(row개수 안맞으면 error) splitrow &amp;lt;- rep(1:35, c(rep(10, 34), 4)) splitrow   ## [1] 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3 3 3 3## [26] 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 5 5## [51] 6 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7 7 7 8 8 8 8 8## [76] 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 10 10 10 10 10 10 10 10 10 10## [101] 11 11 11 11 11 11 11 11 11 11 12 12 12 12 12 12 12 12 12 12 13 13 13 13 13## [126] 13 13 13 13 13 14 14 14 14 14 14 14 14 14 14 15 15 15 15 15 15 15 15 15 15## [151] 16 16 16 16 16 16 16 16 16 16 17 17 17 17 17 17 17 17 17 17 18 18 18 18 18## [176] 18 18 18 18 18 19 19 19 19 19 19 19 19 19 19 20 20 20 20 20 20 20 20 20 20## [201] 21 21 21 21 21 21 21 21 21 21 22 22 22 22 22 22 22 22 22 22 23 23 23 23 23## [226] 23 23 23 23 23 24 24 24 24 24 24 24 24 24 24 25 25 25 25 25 25 25 25 25 25## [251] 26 26 26 26 26 26 26 26 26 26 27 27 27 27 27 27 27 27 27 27 28 28 28 28 28## [276] 28 28 28 28 28 29 29 29 29 29 29 29 29 29 29 30 30 30 30 30 30 30 30 30 30## [301] 31 31 31 31 31 31 31 31 31 31 32 32 32 32 32 32 32 32 32 32 33 33 33 33 33## [326] 33 33 33 33 33 34 34 34 34 34 34 34 34 34 34 35 35 35 351  nrow(penguins)   ## [1] 3441  penguins %&amp;gt;% split(splitrow) -&amp;gt; split3      </description>
      </item>
      
      <item>
        <title>fread</title>
        <link>https://jiwooblog.netlify.app/posts/r/fread/</link>
        <pubDate>Mon, 08 Feb 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/fread/</guid>
        <description>fread 패키지로 대용량 데이터 빠르게 불러오기 약 24000행의 샘플 csv가 있다고 가정하자. 그렇다면 fread와 read.csv의 성능은 다음과 같다.
1 2 3 4 5 6 7 8 9 10 11  library(data.table) fread(&amp;#39;sample.csv&amp;#39;) #약 24000x3 system.time(fread(&amp;#39;sample.csv&amp;#39;)) # 사용자 시스템 elapsed  # 0.02 0.00 0.01  system.time(read.csv(&amp;#39;sample.csv&amp;#39;)) # 사용자 시스템 elapsed  # 0.74 0.03 0.77   read.csv는 0.77초가 걸리는 데에 반해 fread는 0.01초 만에 읽어왔다.
이외에도 3백만 행의 csv으로 실험해본 결과, 각각 2초와 33초로 그 성능 차이가 더욱 도드라짐을 알 수 있었다.</description>
      </item>
      
      <item>
        <title>test</title>
        <link>https://jiwooblog.netlify.app/posts/r/test/</link>
        <pubDate>Fri, 08 Jan 2021 10:08:56 +0900</pubDate>
        
        <guid>https://jiwooblog.netlify.app/posts/r/test/</guid>
        <description>.scroll-100 {max-height: 100px;overflow-y: auto;background-color: &#39;white&#39;;}pre {max-height: 300px;overflow-y: auto;background-color: &#39;white&#39;;}pre[class] {max-height: 100px;background-color: &#39;green&#39;;}# plotly```rlibrary(ggplot2)library(plotly)library(gapminder)1 2 3 4 5 6 7 8  p &amp;lt;- gapminder %&amp;gt;% filter(year==1977) %&amp;gt;% ggplot( aes(gdpPercap, lifeExp, size = pop, color=continent)) + geom_point() + scale_x_log10() + theme_bw() ggplotly(p)   {&#34;</description>
      </item>
      
    
  </channel>
</rss>